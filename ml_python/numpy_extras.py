# -*- coding: utf-8 -*-
"""numpy_extras.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jd2v9b9IqbdhjEZEBkpvrDo2O_r2JsLS

<h1> Let's import Numpy </h1>
"""

import numpy as np

print(np.__version__)

"""<h1> Let's create a simple Numpy array</h1>"""

a = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

print(a[0])

"""<h1>Single-dimensional Numpy Array:</h1>"""

a=np.array([1,2,3])
print(a)

"""<h1>Multi-dimensional Array:</h1>"""

a=np.array([(1,2,3),(4,5,6)])
print(a)

"""<h1>Python NumPy Array v/s List</h1>"""

import time
import sys
S= range(1000)
print(sys.getsizeof(5)*len(S))
 
D= np.arange(1000)
print(D.size*D.itemsize)

SIZE = 1000000
 
L1= range(SIZE)
L2= range(SIZE)
A1= np.arange(SIZE)
A2=np.arange(SIZE)
 
start= time.time()
result=[(x,y) for x,y in zip(L1,L2)]
print((time.time()-start)*1000)
 
start=time.time()
result= A1+A2
print((time.time()-start)*1000)

"""<h1>Python NumPy Operations</h1>

**ndim**
"""

a = np.array([(1,2,3),(4,5,6)])
print(a.ndim)

"""**itemsize**"""

a = np.array([(1,2,3)])
print(a.itemsize)

"""**dtype**"""

a = np.array([(1,2,3)])
print(a.dtype)

"""**Size and Shape**"""

a = np.array([(1,2,3,4,5,6)])
print(a.size)
print(a.shape)

"""**reshape**"""

a = np.array([(8,9,10),(11,12,13)])
print(a)
a=a.reshape(3,2)
print(a)

"""![alt text](https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/06/Reshape.jpg)

**slicing**
"""

a=np.array([(1,2,3,4),(3,4,5,6)])
print(a[0,2])

a=np.array([(1,2,3,4),(3,4,5,6)])
print(a[0:,2])

a=np.array([(8,9),(10,11),(12,13)])
print(a[0:2,1])

"""![alt text](https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/06/Slicing.jpg)

**linspace**
"""

a=np.linspace(1,3,10)
print(a)

"""**min/max**"""

a= np.array([1,2,3])
print(a.min())
print(a.max())
print(a.sum())

"""![alt text](https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/06/array.png)"""

a= np.array([(1,2,3),(3,4,5)])
print(a.sum(axis=0))

"""**Square Root & Standard Deviation**"""

a=np.array([(1,2,3),(3,4,5,)])
print(np.sqrt(a))
print(np.std(a))

"""**Arithmetic operations**"""

x= np.array([(1,2,3),(3,4,5)])
y= np.array([(1,2,3),(3,4,5)])
print(x+y)
print(x-y)
print(x*y)
print(x/y)

"""**Vertical and Horizontal stacking**"""

x= np.array([(1,2,3),(3,4,5)])
y= np.array([(1,2,3),(3,4,5)])
print(np.vstack((x,y)))
print(np.hstack((x,y)))

"""**ravel**"""

x= np.array([(1,2,3),(3,4,5)])
print(x.ravel())

"""**Python Numpy Special Functions**"""

import matplotlib.pyplot as plt
x= np.arange(0,3*np.pi,0.1)
y=np.sin(x)
plt.plot(x,y)
plt.show()

import numpy as np
import matplotlib.pyplot as plt
x= np.arange(0,3*np.pi,0.1)
y=np.tan(x)
plt.plot(x,y)
plt.show()

a= np.array([1,2,3])
print(np.exp(a))

a= np.array([1,2,3])
print(np.log(a))

a= np.array([1,2,3])
print(np.log10(a))

"""<h1>Other useful functions</h1>

**Creating Numpy arrays**
"""

print(np.array([1,2,3]))
print(np.zeros(10))
print(np.ones(10))
print(np.empty(10))
print(np.arange(2,9,2))
print(np.linspace(1,3,10))

"""**Adding, removing, and sorting elements**"""

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8])

print(np.append(arr, [1,2]))


print(np.delete(arr, 1))


print(np.sort(arr))

"""**Reshape**"""

a = np.arange(6)
print(a)

b = a.reshape(3,2)
print(b)

"""**Operations on Numpy arrays**"""

a = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

print(a[a<5])

five_up = (a >= 5)
print(a[five_up])

divisible_by_2 = a[a%2==0]
print(divisible_by_2)

c = a[(a > 2) & (a < 11)]
print(c)

five_up = (a > 5) | (a == 5)
print(five_up)

b = np.where(a<5)
print(b)

# Some practice notes
import numpy as np

mylist = [1,2,3,4]
arr = np.array(mylist)

type(arr)

# Built in functions

a = np.arange(0,10)
a

# Add step size
a = np.arange(0,10,2)
a

# 2 dimentional array
a2d0 = np.zeros((5,5))
a2d0

a2d1 = np.ones((5,5))
a2d1

# Numpy likes to convert numbers to float if you 
# provide them in to integers

# Create random arrays of numbers

# Random array of integers
# Return random number between 1 to 100
np.random.randint(0, 100)

# array of random numbers
# 5 * 5 array of numbers randomly chosen between 0 and 100
# This is based on uniform distribution so
# numbers from 0 to 100 have same likelihood of being picked
np.random.randint(0, 100, (5,5))

# Linearly spaced array
np.linspace(0, 10, 6)

# Get 101 linealy spaced numbers between 0 to 10
np.linspace(0, 10, 101)

# numpy operations

# to generate the random numbers over and over again
# sets the seed of random number generator of numpy
np.random.seed(101)

# you should get the same random numbers no matter
# how many times you repeat this process
np.random.randint(0,100, 10)


# Other numpy operations
arr = np.random.randint(0, 100, 10)

arr.max()

arr.min()

# All possible functions available
dir(arr)

arr.mean()

# Index location of max value
arr.argmax()

# Index location of min value
arr.argmin()

# 1*10 to 2*5
arr.reshape(2,5)


# Indexing and Masking

# stacking arange and reshape methods
mat = np.arange(0, 100).reshape(10, 10)

# call individual items
# Indexing 52
mat[5,2]

# Get the entire 2nd column
mat[:,2]

mat[2,:]

# Masking - uses conditional filtering to get elements
# We use more of this in Pandas

# Matrix of boolean values
# False  - value less than or equal to 50
# True - greater than 50 
mat > 50

mat[mat > 50]