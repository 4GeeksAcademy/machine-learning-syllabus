# -*- coding: utf-8 -*-
"""machine_learning_naive_bayes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O_1tcYHjb6luGvftrjfWB8xpIOyxmkvI

# Loading common libraries
"""

import pandas as pd
import numpy as np

# Regression metrics
from sklearn.metrics import mean_squared_error

# Classification metrics
from sklearn.metrics import accuracy_score

"""# Load datasets

## Load datasets for classification
"""

# read the train and test dataset
class_train_data = pd.read_csv('https://raw.githubusercontent.com/vamsivarma/datasets/master/machine_learning/logistic_regression/train.csv')
class_test_data = pd.read_csv('https://raw.githubusercontent.com/vamsivarma/datasets/master/machine_learning/logistic_regression/test.csv')

# shape of the dataset
print('Shape of classification training data :', class_train_data.shape)
print('Shape of classification testing data :', class_test_data.shape)

"""Separating the target variable (or column) which we want to predict using ML algorithms"""

# Now, we need to predict the missing target variable in the test data
# target variable - Survived

# seperate the independent and target variable on training data
class_train_x = class_train_data.drop(columns=['Survived'],axis=1)
class_train_y = class_train_data['Survived']

# seperate the independent and target variable on testing data
class_test_x = class_test_data.drop(columns=['Survived'],axis=1)
class_test_y = class_test_data['Survived']

class_train = pd.DataFrame(columns=['Train'])
class_train['Train'] = class_train_y

class_test = pd.DataFrame(columns=['Test'])
class_test['Test'] = class_test_y

## Data frames for saving prediction of different algorithms
col_list = ['NB']

# Classification predictions for train and test set
class_train_pred = pd.DataFrame(columns = col_list)
class_test_pred = pd.DataFrame(columns = col_list)

"""# Naive Bayes"""

import sklearn.naive_bayes
dir(sklearn.naive_bayes)

# importing required libraries
from sklearn.naive_bayes import GaussianNB


'''
Create the object of the Naive Bayes model
You can also add other parameters and test your code here
Some parameters are : var_smoothing
Documentation of sklearn GaussianNB: 

https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.GaussianNB.html
'''

model = GaussianNB()

# fit the model with the training data
model.fit(class_train_x, class_train_y)

# predict the target on the train dataset
predict_train = model.predict(class_train_x)
print('Target on train data',predict_train) 

# Accuray Score on train dataset
accuracy_train = accuracy_score(class_train_y, predict_train)
print('Accuracy for Naive Bayes on train dataset : ', accuracy_train)

# predict the target on the test dataset
predict_test = model.predict(class_test_x)
print('Target on test data',predict_test) 

# Accuracy Score on test dataset
accuracy_test = accuracy_score(class_test_y, predict_test)
print('Accuracy for Naive Bayes on test dataset : ', accuracy_test)

"""#### Naive bayes accuracy is very low for our dataset so it might not be a good choice for our learning algorithm. This algorithm is more effective for text classifiers. """