# -*- coding: utf-8 -*-
"""linear_regression_logistic_regression_support_vector_machines.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q7Nadc2vCLe6RMrhg_ZI6UD6IoMYK6jv

# Loading common libraries
"""

import pandas as pd
import numpy as np

# Regression metrics
from sklearn.metrics import mean_squared_error

# Classification metrics
from sklearn.metrics import accuracy_score

"""# Load datasets

## Load datasets for classification
"""

# read the train and test dataset
class_train_data = pd.read_csv('https://raw.githubusercontent.com/vamsivarma/datasets/master/machine_learning/logistic_regression/train.csv')
class_test_data = pd.read_csv('https://raw.githubusercontent.com/vamsivarma/datasets/master/machine_learning/logistic_regression/test.csv')


#print(class_train_data.head())

# shape of the dataset
print('Shape of classification training data :', class_train_data.shape)
print('Shape of classification testing data :', class_test_data.shape)

class_train_data.head()

class_test_data.head()

"""Separating the target variable (or column) which we want to predict using ML algorithms"""

# Now, we need to predict the missing target variable in the test data
# target variable - Survived

# seperate the independent and target variable on training data
class_train_x = class_train_data.drop(columns=['Survived'],axis=1)
class_train_y = class_train_data['Survived']

# seperate the independent and target variable on testing data
class_test_x = class_test_data.drop(columns=['Survived'],axis=1)
class_test_y = class_test_data['Survived']

"""## Load datasets for Regression"""

# These datasets are used for following algorithms
# Linear regression

# read the train and test dataset
reg_train_data = pd.read_csv('https://raw.githubusercontent.com/vamsivarma/datasets/master/machine_learning/linear_regression/train.csv')
reg_test_data = pd.read_csv('https://raw.githubusercontent.com/vamsivarma/datasets/master/machine_learning/linear_regression/test.csv')

# shape of the dataset
print('\nShape of regression training data :',reg_train_data.shape)
print('\nShape of regression testing data :',reg_test_data.shape)

reg_train_data.head()

reg_test_data.head()

"""Separating the target variable (or column) which we want to predict using ML algorithms"""

# Now, we need to predict the missing target variable in the test data
# target variable - Item_Outlet_Sales
# seperate the independent and target variable on training data
reg_train_x = reg_train_data.drop(columns=['Item_Outlet_Sales'],axis=1)
reg_train_y = reg_train_data['Item_Outlet_Sales']

# seperate the independent and target variable on training data
reg_test_x = reg_test_data.drop(columns=['Item_Outlet_Sales'],axis=1)
reg_test_y = reg_test_data['Item_Outlet_Sales']

"""# Linear Regression"""

# importing required libraries for LR
from sklearn.linear_model import LinearRegression

'''
Documentation:
Create the object of the Linear Regression model
You can also add other parameters and test your code here
Some parameters are : fit_intercept and normalize
Documentation of sklearn LinearRegression: 

https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html
'''

model = LinearRegression()

# fit the model with the training data
model.fit(reg_train_x,reg_train_y)

# coefficeints of the trained model
#print('\nCoefficient of model :', model.coef_)

# intercept of the model
#print('\nIntercept of model',model.intercept_)

# predict the target on the test dataset
predict_train = model.predict(reg_train_x)
#print('\nItem_Outlet_Sales on training data',predict_train) 

# Root Mean Squared Error on training dataset
rmse_train = mean_squared_error(reg_train_y, predict_train)**(0.5)
print('\nRMSE for Linear regression on train dataset : ', rmse_train)

# predict the target on the testing dataset
predict_test = model.predict(reg_test_x)
#print('\nItem_Outlet_Sales on test data',predict_test) 

# Root Mean Squared Error on testing dataset
rmse_test = mean_squared_error(reg_test_y,predict_test)**(0.5)
print('\nRMSE for Linear regression on test dataset : ', rmse_test)

"""# Logistic Regression"""

# importing required libraries
from sklearn.linear_model import LogisticRegression

'''
Documentation:
Create the object of the Logistic Regression model
You can also add other parameters and test your code here
Some parameters are : fit_intercept and penalty
Documentation of sklearn LogisticRegression: 
https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html
'''

model = LogisticRegression()

# fit the model with the training data
model.fit(class_train_x, class_train_y)

# coefficeints of the trained model
#print('Coefficient of model :', model.coef_)

# intercept of the model
#print('Intercept of model',model.intercept_)

# predict the target on the train dataset
predict_train = model.predict(class_train_x)
#print('Target on train data',predict_train) 

# Accuray Score on train dataset
accuracy_train = accuracy_score(class_train_y, predict_train)
print('\nAccuracy for Logistic regression on train dataset : ', accuracy_train)

# predict the target on the test dataset
predict_test = model.predict(class_test_x)
#print('Target on test data',predict_test) 

# Accuracy Score on test dataset
accuracy_test = accuracy_score(class_test_y, predict_test)
print('\nAccuracy for Logistic regression on test dataset : ', accuracy_test)

"""# SVM"""

'''
Credits:
The following code is for Support Vector Machines
Created by - ANALYTICS VIDHYA
'''
# importing required libraries
from sklearn.svm import SVC

'''
Create the object of the Support Vector Classifier model
You can also add other parameters and test your code here
Some parameters are : kernal and degree
Documentation of sklearn Support Vector Classifier: 

https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html

 '''
model = SVC()

# fit the model with the training data
model.fit(class_train_x,class_train_y)

# predict the target on the train dataset
predict_train = model.predict(class_train_x)
#print('Target on train data',predict_train) 

# Accuray Score on train dataset
accuracy_train = accuracy_score(class_train_y,predict_train)
print('\nAccuracy for SVM on train dataset : ', accuracy_train)

# predict the target on the test dataset
predict_test = model.predict(class_test_x)
#print('Target on test data',predict_test) 

# Accuracy Score on test dataset
accuracy_test = accuracy_score(class_test_y,predict_test)
print('\nAccuracy for SVM on test dataset : ', accuracy_test)

